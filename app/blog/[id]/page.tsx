// 'use client'
import { Metadata } from "next";

async function getData(id: string) {
    const response = await fetch(
      `https://jsonplaceholder.typicode.com/posts/${id}`,
      {
        next: {
          revalidate: 60,
        },
      }
);

    return response.json();
}

type Props = {
    params: {
      id: string;
    };
};

// для Metadata в динамических страницах используем функцию generateMetadata приниимает те же параметры что и компанент используем их что бы вернуть конкретное значение

export async function generateMetadata({params: { id },}: Props): Promise<Metadata> {
  const post = await getData(id);

  return {
    title: post.title,
  };
}

  // так как это динамическая страница компанент принимает объект params с полем id id потому что так назвали папку
  // доступна по адресу http://localhost:3000/blog/id

export default async function Post({ params: { id } }: Props) {
    const post = await getData(id);
    // console.log('Post', post) // консоли отрабатывают на сревере так как компанет сервверный
  
    // return <h1>Post page {id}</h1>
    return (
      <>
        <h1>{post.title}</h1>
        <p>{post.body}</p>
      </>
    );
  }

  // серверные компаненты 
  // это не просто ssr который кинул нам html и потом эту штмлку натянули на js и мы полукчаем компанент
  // все компаненты которые создавали до этого серверные

  // главный плюс серверных компанентов в том что на фронтенд не поставляется js лишний ja
  // тоесть если надо нарисовать страницу на которой всегда есть статические данные как на этой странице 
  // получаются данные по id но вцелом это статика и поэтому можно отдать html без кокого либо js пользовательского взаимодействия тут нет
  // меньше бандл у пользователя приложение загружается быстрее

  // поумолчанию в next любой компанент страница является серверным компанентом

  // как минус в серврерных компанентах не можем использовать ничего связанного со стейтом реакт хуки методы жизненного цикла классовые компаненты

  // если надо использовать реакт хуки методы жизненного цикла и в ряде других случаев надо создавать клиентский компанент
  // любой клиентский компанент начинается с 'use client'

  // если делать допустим строку поиска понадобится клиентский компанент которыйц будет отрабатывать на фронтенде